using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace DelegateDecouple
{
    public delegate int pointerFunction(int x, int y);
    public class MathClass
    {
        public static int Add(int x, int y)
        {
            return x + y;
        }



        public static int Sub(int x, int y)
        {
            return x - y;
        }

        /*
         public static pointerFunction getPointer(int operation) {
             pointerFunction pf=null;
             if (operation == 1)
                 pf = Add; //add can be private as well
             else if (operation == 2)
                 pf = Sub; //sub can be private as well

             return pf;

         }*/

        /*
        public static pointerFunction getPointer(int operation)
        { //with anonymous method
            pointerFunction pf = null;
            if (operation == 1)
                pf = delegate (int x, int y) { return x + y; };
            else if (operation == 2)
                pf = delegate (int x, int y) { return x - y; };

            return pf;

        }
        */
        /*
        public static pointerFunction getPointer(int operation)
        { //with lambda expression
            pointerFunction pf = null;
            if (operation == 1)
                pf = (int x, int y) => { return x + y; };
            else if (operation == 2)
                pf = (int x, int y) => { return x - y; };

            return pf;

        }*/

    }
}